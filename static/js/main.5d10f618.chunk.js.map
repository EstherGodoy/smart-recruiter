{"version":3,"sources":["form.js","results.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","className","class","id","name","onChange","filterChange","value","Object","keys","locations","map","keyName","keyIndex","show","key","disabled","jobTypes","Results","searchResults","job","Math","random","typeOfEmployment","label","industry","location","city","href","ref","target","App","state","smartRecruiterResults","onFilterChange","bind","updateSearchResults","e","SELECTED_VALUE","SELECTED_TYPE","UPDATED_JOB_TYPES","this","UPDATED_LOCATIONS","stateObj","includes","setState","stateValue","filterType","filterValue","ORIGINAL_DATA","enabledLocations","enabledJobTypes","locationFilterVal","document","getElementById","jobFilterVal","currentLocations","currentJobTypes","push","fetch","then","response","json","data","content","results","index","console","log","testYO","React","Component","Boolean","window","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5d10f618.chunk.js","sourcesContent":["import React from \"react\"\nimport formStyles from \"./styles/form.scss\"\n\nconst Form = (props) => (\n  <div>\n    <h1>Careers - Find The Perfect Job For You</h1>\n    <form className=\"filter-form\">\n      <div class=\"select-wrap\">\n        <select id=\"location-filter\" name=\"location\" onChange={props.filterChange}>\n          <option value=\"all\">All Locations</option>\n          {Object.keys(props.locations).map(function(keyName, keyIndex) {\n            return (props.locations[keyName].show) ? <option key={keyIndex} value={keyName}>{keyName}</option> : <option key={keyIndex} value={keyName} disabled>{keyName}</option>;\n          })}\n        </select>\n      </div>\n      <div class=\"select-wrap\">\n        <select id=\"job-filter\" name=\"job-type\" onChange={props.filterChange}>\n          <option value=\"all\">All Job Types</option>\n          {Object.keys(props.jobTypes).map(function(keyName, keyIndex) {\n            return (props.jobTypes[keyName].show) ? <option key={keyIndex} value={keyName}>{keyName}</option> : <option key={keyIndex} value={keyName} disabled>{keyName}</option>;\n          })}\n        </select>\n      </div>\n    </form>\n  </div>\n)\n\nexport default Form;\n","import React from \"react\"\nimport resultsStyles from \"./styles/results.scss\"\n\nconst Results = (props) => (\n  <div className=\"search-results\">\n    <ul>\n    {props.searchResults.map(function(job) {\n      return <li key={job.name + Math.random()}><h2>{job.name}</h2> <p>{job.typeOfEmployment.label} - {job.industry.label} -  {job.location.city}</p> <a href={job.ref} target=\"_blank\">Apply Now</a></li>\n    })}\n    </ul>\n  </div>\n)\n\nexport default Results;\n","import React from 'react';\nimport Form from \"./form\"\nimport Results from \"./results\"\nimport './App.css';\n\nconst API = 'https://api.smartrecruiters.com/v1/companies/TheSpringsLiving/postings';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n        smartRecruiterResults : [],\n        locations :[],\n        jobTypes: [],\n        searchResults: [],\n    };\n\n    this.onFilterChange = this.onFilterChange.bind(this);\n    this.updateSearchResults = this.updateSearchResults.bind(this);\n  }\n\n  onFilterChange(e){\n    const SELECTED_VALUE = e.target.value;\n    const SELECTED_TYPE = e.target.name\n    const UPDATED_JOB_TYPES = this.state.jobTypes;\n    const UPDATED_LOCATIONS = this.state.locations;\n    let stateValue = (SELECTED_TYPE == 'location') ? 'locations' : 'jobTypes' ;\n    let stateObj = (SELECTED_TYPE == 'location') ?   UPDATED_JOB_TYPES : UPDATED_LOCATIONS;\n\n    //check locations up against job types & update drop down selectors to correspond to available job listings\n    Object.keys(stateObj).map(function(value, key) {\n      (!stateObj[value].locations.includes(SELECTED_VALUE) && SELECTED_VALUE != 'all') ? stateObj[value].show = false : stateObj[value].show = true;\n    })\n\n    //update state\n    this.setState({stateValue : stateObj});\n\n    this.updateSearchResults(SELECTED_VALUE, SELECTED_TYPE);\n  }\n\n  updateSearchResults(filterType, filterValue){\n    const ORIGINAL_DATA = this.state.smartRecruiterResults;\n\n    let enabledLocations = [];\n    let enabledJobTypes = [];\n    let locationFilterVal = document.getElementById('location-filter').value;\n    let jobFilterVal = document.getElementById('job-filter').value;\n    let currentLocations = this.state.locations;\n    let currentJobTypes = this.state.jobTypes;\n\n    if (locationFilterVal == 'all') {\n      Object.keys(currentLocations).map(function(value, key) {\n        if (currentLocations[value].show) {\n          enabledLocations.push(value);\n        }\n      })\n    }\n    else {\n      enabledLocations.push(locationFilterVal);\n    }\n\n    if (jobFilterVal == 'all') {\n      Object.keys(currentJobTypes).map(function(value, key) {\n        if (currentJobTypes[value].show) {\n          enabledJobTypes.push(value);\n        }\n      })\n    }\n    else {\n      enabledJobTypes.push(jobFilterVal);\n    }\n\n    let searchResults = [];\n\n    ORIGINAL_DATA.map(function(job) {\n      if (enabledJobTypes.includes(job.industry.label) && enabledLocations.includes(job.location.city)) {\n        searchResults.push(job);\n      }\n    })\n\n    this.setState({searchResults : searchResults});\n  }\n\n  componentDidMount() {\n    fetch(API)\n    .then(response => response.json())\n    .then(\n      data => this.setState(\n        {smartRecruiterResults: data.content},\n        () => {\n          const results = this.state.smartRecruiterResults;\n\n          /* Retrieve All Locations & Assign Job List to Corresponding Location */\n          const locations = {};\n          results.map((job, index) => (locations[job.location.city] = {}))\n\n          results.map((job, index) => (\n            locations[job.location.city] = {locations : [], show: true}\n          ))\n\n          results.map((job, index) => {\n            if (!locations[job.location.city].locations.includes(job.industry.label)) {\n              locations[job.location.city].locations.push(job.industry.label)\n            }\n          })\n\n          this.setState({locations : locations});\n\n          /* Retrieve All Job Types & Assign to Location */\n          const jobTypes = {};\n\n          results.map((job, index) => (\n            jobTypes[job.industry.label] = {locations : [], show: true}\n          ))\n\n          results.map((job, index) => {\n            if (!jobTypes[job.industry.label].locations.includes(job.location.city)) {\n                jobTypes[job.industry.label].locations.push(job.location.city)\n            }\n          })\n\n          this.setState({jobTypes : jobTypes});\n          this.setState({searchResults : this.state.smartRecruiterResults}, () => console.log(this.state.searchResults));\n        }\n    )\n  );\n  }\n\n  render() {\n    return (\n      <div className=\"App container\">\n        <Form locations={this.state.locations} jobTypes={this.state.jobTypes} filterChange={this.onFilterChange}/>\n        <Results searchResults={this.state.searchResults} testYO=\"wtf\"/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}